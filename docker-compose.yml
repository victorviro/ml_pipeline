version: "3.5"

x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: ./docker/airflow/Dockerfile
    args:
      PROJECT_NAME: ${PROJECT_NAME}
  environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: "postgresql://${POSTGRES_USER}:\
        ${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_AIRFLOW_DB}"
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__DAGS_FOLDER: /${PROJECT_NAME}/${PROJECT_SRC}/airflow_dags
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW_EXECUTOR}
      PYTHONPATH: /${PROJECT_NAME}
      MLFLOW_TRACKING_URI: http://mlflow:$MLFLOW_PORT
  volumes:
    #- ./${PROJECT_SRC}/shared/constants.py:/${PROJECT_NAME}/${PROJECT_SRC}/shared/constants.py
    - ./${PROJECT_SRC}/shared/:/${PROJECT_NAME}/${PROJECT_SRC}/shared/
    - ./${PROJECT_SRC}/airflow_dags/pipeline_apis.py:/${PROJECT_NAME}/${PROJECT_SRC}/airflow_dags/pipeline_apis.py
    - ./${PROJECT_SRC}/airflow_dags/logs:/root/airflow/logs
  restart: always
  depends_on:
    - postgres
  env_file: 
    .env

x-use_cases-common:
  &use_cases-common
  build:
    &use_cases-common-build
    context: .
    dockerfile: ./docker/use_cases/Dockerfile
    args:
      &use_cases-common-args
      PROJECT_NAME: ${PROJECT_NAME}
      PROJECT_SRC: ${PROJECT_SRC}
  restart: always


services:
  # region Airflow containers
  airflow-init: 
    <<: *airflow-common
    container_name: airflow-init
    command: >
      bash -c "airflow db init && 
      airflow users create  -u ${AIRFLOW_USERNAME} -p ${AIRFLOW_USER_PASSWORD} \
        -r ${AIRFLOW_USER_ROLE} -f ${AIRFLOW_USER_FIRSTNAME} -l ${AIRFLOW_USER_LASTNAME} \
        -e ${AIRFLOW_USER_EMAIL}"
    restart: on-failure

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: airflow webserver -p $AIRFLOW_PORT
    ports:
      - '${AIRFLOW_PORT}:${AIRFLOW_PORT}'
  
  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: airflow scheduler
  # endregion

  jupyter:
    container_name: jupyter
    build:
      context: .
      dockerfile: ./docker/jupyter/Dockerfile
      args:
        PROJECT_NAME: ${PROJECT_NAME}
        PROJECT_SRC: ${PROJECT_SRC}
    environment:
      PYTHONPATH: /${PROJECT_NAME}
      JUPYTER_PORT: ${JUPYTER_PORT}
      JUPYTER_HOST: ${JUPYTER_HOST}
    ports:
      - ${JUPYTER_PORT}:${JUPYTER_PORT}
    volumes:
      - ./${PROJECT_SRC}/shared:/${PROJECT_NAME}/${PROJECT_SRC}/shared
      - ./${PROJECT_SRC}/notebooks:/${PROJECT_NAME}/${PROJECT_SRC}/notebooks
      - ./${DATA_PATH}:/${PROJECT_NAME}/${DATA_PATH}
    restart: always
    
  # region MLflow container
  mlflow:
    container_name: mlflow
    build:
      context: .
      dockerfile: ./docker/mlflow/Dockerfile
      args:
        PROJECT_NAME: ${PROJECT_NAME}
    restart: always
    ports:
      - ${MLFLOW_PORT}:${MLFLOW_PORT}
    environment:
      MLFLOW_SQL_ALCHEMY_CONN: "postgresql://${POSTGRES_USER}:\
        ${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_MLFLOW_DB}"
      ARTIFACT_STORE_PATH: ${ARTIFACT_STORE_PATH}
      MLFLOW_HOST: ${MLFLOW_HOST}
      MLFLOW_PORT: ${MLFLOW_PORT}
    volumes:
      - ./${ARTIFACT_STORE_PATH}:/${PROJECT_NAME}/${ARTIFACT_STORE_PATH}
    depends_on:
      - postgres
  # endregion


  postgres:
    container_name: postgres
    build:
      context: .
      dockerfile: ./docker/postgres/Dockerfile
      args:
        POSTGRES_DB: ${POSTGRES_DB}
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    restart: always
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - vol_postres:/var/lib/postgresql/data
    env_file:
      - .env

  # region Use cases
  validate_data:
    <<: *use_cases-common
    container_name: validate_data
    build:
      <<: *use_cases-common-build
      args:
        <<: *use_cases-common-args
        USE_CASE: ${USE_CASE_VALIDATE_DATA}
    volumes: 
      - ./${DATA_PATH}:/${PROJECT_NAME}/${DATA_PATH}
      - ./${LOGS_PATH}:/${PROJECT_NAME}/${LOGS_PATH}
      - ./${PROJECT_SRC}/shared/:/${PROJECT_NAME}/${PROJECT_SRC}/shared/
      - ./${PROJECT_SRC}/${USE_CASE_VALIDATE_DATA}/:/${PROJECT_NAME}/${PROJECT_SRC}/${USE_CASE_VALIDATE_DATA}/
    ports:
      - ${PORT_VALIDATE_DATA}:${PORT_VALIDATE_DATA}
    command: >
      uvicorn src.${USE_CASE_VALIDATE_DATA}.infrastructure.${API_FILE_VALIDATE_DATA}:rest_api 
        --host ${HOST_USE_CASES_APIS} --port ${PORT_VALIDATE_DATA}

  get_data:
    <<: *use_cases-common
    container_name: get_data
    build:
      <<: *use_cases-common-build
      args:
        <<: *use_cases-common-args
        USE_CASE: ${USE_CASE_GET_DATA}
    volumes: 
      - ./${DATA_PATH}:/${PROJECT_NAME}/${DATA_PATH}
      - ./${LOGS_PATH}:/${PROJECT_NAME}/${LOGS_PATH}
      - ./${PROJECT_SRC}/shared/:/${PROJECT_NAME}/${PROJECT_SRC}/shared/
      - ./${PROJECT_SRC}/${USE_CASE_GET_DATA}/:/${PROJECT_NAME}/${PROJECT_SRC}/${USE_CASE_GET_DATA}/
    ports:
      - ${PORT_GET_DATA}:${PORT_GET_DATA}
    command: >
      uvicorn src.${USE_CASE_GET_DATA}.infrastructure.${API_FILE_GET_DATA}:rest_api 
        --host ${HOST_USE_CASES_APIS} --port ${PORT_GET_DATA}
    network_mode: host

  version_data:
    <<: *use_cases-common
    container_name: version_data
    build:
      <<: *use_cases-common-build
      args:
        <<: *use_cases-common-args
        USE_CASE: ${USE_CASE_VERSION_DATA}
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:$MLFLOW_PORT
    volumes: 
      - ./${DATA_PATH}:/${PROJECT_NAME}/${DATA_PATH}
      - ./${LOGS_PATH}:/${PROJECT_NAME}/${LOGS_PATH}
      - ./${PROJECT_SRC}/shared/:/${PROJECT_NAME}/${PROJECT_SRC}/shared/
      - ./${PROJECT_SRC}/${USE_CASE_VERSION_DATA}/:/${PROJECT_NAME}/${PROJECT_SRC}/${USE_CASE_VERSION_DATA}/
      - ./${DVC_PATH}/:/${PROJECT_NAME}/${DVC_PATH}/
      - ./${GIT_PATH}/:/${PROJECT_NAME}/${GIT_PATH}/
      - ${LOCAL_SSH_DIR}/.ssh/:/root/.ssh/
    ports:
      - ${PORT_VERSION_DATA}:${PORT_VERSION_DATA}
    command: >
      bash -c "git config user.name victorviro &&
      git config user.email victor_sanchez91@hotmail.es &&
      uvicorn src.${USE_CASE_VERSION_DATA}.infrastructure.${API_FILE_VERSION_DATA}:rest_api \
        --host ${HOST_USE_CASES_APIS} --port ${PORT_VERSION_DATA}"
# /bin/sh -c "./docker/use_cases/version_data/entrypoint_init_git.sh" &

  transform_data:
    <<: *use_cases-common
    container_name: transform_data
    build:
      <<: *use_cases-common-build
      args:
        <<: *use_cases-common-args
        USE_CASE: ${USE_CASE_TRANSFORM_DATA}
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:$MLFLOW_PORT
    volumes: 
      - ./${DATA_PATH}:/${PROJECT_NAME}/${DATA_PATH}
      - ./${ARTIFACT_STORE_PATH}:/${PROJECT_NAME}/${ARTIFACT_STORE_PATH}
      - ./${LOGS_PATH}:/${PROJECT_NAME}/${LOGS_PATH}
      - ./${PROJECT_SRC}/shared/:/${PROJECT_NAME}/${PROJECT_SRC}/shared/
      - ./${PROJECT_SRC}/${USE_CASE_TRANSFORM_DATA}/:/${PROJECT_NAME}/${PROJECT_SRC}/${USE_CASE_TRANSFORM_DATA}/
    ports:
      - ${PORT_TRANSFORM_DATA}:${PORT_TRANSFORM_DATA}
    command: >
      uvicorn src.${USE_CASE_TRANSFORM_DATA}.infrastructure.${API_FILE_TRANSFORM_DATA}:rest_api 
        --host ${HOST_USE_CASES_APIS} --port ${PORT_TRANSFORM_DATA}
  
  train_model:
    <<: *use_cases-common
    container_name: train_model
    build:
      <<: *use_cases-common-build
      args:
        <<: *use_cases-common-args
        USE_CASE: ${USE_CASE_TRAIN_MODEL}
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:$MLFLOW_PORT
      HOST_TRANSFORM_DATA: ${HOST_TRANSFORM_DATA}
      PORT_TRANSFORM_DATA: ${PORT_TRANSFORM_DATA}
      ENDPOINT_TRANSFORM_DATA: ${ENDPOINT_TRANSFORM_DATA}
    volumes: 
      - ./${DATA_PATH}:/${PROJECT_NAME}/${DATA_PATH}
      - ./${ARTIFACT_STORE_PATH}:/${PROJECT_NAME}/${ARTIFACT_STORE_PATH}
      - ./${LOGS_PATH}:/${PROJECT_NAME}/${LOGS_PATH}
      - ./${PROJECT_SRC}/shared/:/${PROJECT_NAME}/${PROJECT_SRC}/shared/
      - ./${PROJECT_SRC}/${USE_CASE_TRAIN_MODEL}/:/${PROJECT_NAME}/${PROJECT_SRC}/${USE_CASE_TRAIN_MODEL}/
    ports:
      - ${PORT_TRAIN_MODEL}:${PORT_TRAIN_MODEL}
    command: >
      uvicorn src.${USE_CASE_TRAIN_MODEL}.infrastructure.${API_FILE_TRAIN_MODEL}:rest_api 
        --host ${HOST_USE_CASES_APIS} --port ${PORT_TRAIN_MODEL}

  validate_model:
    <<: *use_cases-common
    container_name: validate_model
    build:
      <<: *use_cases-common-build
      args:
        <<: *use_cases-common-args
        USE_CASE: ${USE_CASE_VALIDATE_MODEL}
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:$MLFLOW_PORT
      HOST_TRANSFORM_DATA: ${HOST_TRANSFORM_DATA}
      PORT_TRANSFORM_DATA: ${PORT_TRANSFORM_DATA}
      ENDPOINT_TRANSFORM_DATA: ${ENDPOINT_TRANSFORM_DATA}
    volumes: 
      - ./${DATA_PATH}:/${PROJECT_NAME}/${DATA_PATH}
      - ./${ARTIFACT_STORE_PATH}:/${PROJECT_NAME}/${ARTIFACT_STORE_PATH}
      - ./${LOGS_PATH}:/${PROJECT_NAME}/${LOGS_PATH}
      - ./${PROJECT_SRC}/shared/:/${PROJECT_NAME}/${PROJECT_SRC}/shared/
      - ./${PROJECT_SRC}/${USE_CASE_VALIDATE_MODEL}/:/${PROJECT_NAME}/${PROJECT_SRC}/${USE_CASE_VALIDATE_MODEL}/
    ports:
      - ${PORT_VALIDATE_MODEL}:${PORT_VALIDATE_MODEL}
    command: >
      uvicorn src.${USE_CASE_VALIDATE_MODEL}.infrastructure.${API_FILE_VALIDATE_MODEL}:rest_api 
        --host ${HOST_USE_CASES_APIS} --port ${PORT_VALIDATE_MODEL}


  serve_model:
    <<: *use_cases-common
    container_name: serve_model
    build:
      <<: *use_cases-common-build
      args:
        <<: *use_cases-common-args
        USE_CASE: ${USE_CASE_SERVE_MODEL}
    environment:
      MLFLOW_TRACKING_URI: http://mlflow:$MLFLOW_PORT
      HOST_TRANSFORM_DATA: ${HOST_TRANSFORM_DATA}
      PORT_TRANSFORM_DATA: ${PORT_TRANSFORM_DATA}
      ENDPOINT_TRANSFORM_DATA: ${ENDPOINT_TRANSFORM_DATA}
    volumes: 
      - ./${ARTIFACT_STORE_PATH}:/${PROJECT_NAME}/${ARTIFACT_STORE_PATH}
      - ./${LOGS_PATH}:/${PROJECT_NAME}/${LOGS_PATH}
      - ./${PROJECT_SRC}/shared/:/${PROJECT_NAME}/${PROJECT_SRC}/shared/
      - ./${PROJECT_SRC}/${USE_CASE_SERVE_MODEL}/:/${PROJECT_NAME}/${PROJECT_SRC}/${USE_CASE_SERVE_MODEL}/
    ports:
      - ${PORT_SERVE_MODEL}:${PORT_SERVE_MODEL}
    command: >
      uvicorn src.${USE_CASE_SERVE_MODEL}.infrastructure.${API_FILE_SERVE_MODEL}:rest_api 
        --host ${HOST_USE_CASES_APIS} --port ${PORT_SERVE_MODEL}
  # endregion


volumes:
  vol_postres:
    driver: local
