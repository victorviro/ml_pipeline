version: "2.2"

x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: ./docker/airflow/Dockerfile
    args:
      PROJECT_NAME: ${PROJECT_NAME}
  environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: "postgresql://${POSTGRES_USER}:\
        ${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_AIRFLOW_DB}"
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__DAGS_FOLDER: /${PROJECT_NAME}/${PROJECT_SRC}/airflow_dags
  volumes:
    - ./${PROJECT_SRC}/config_variables.py:/${PROJECT_NAME}/${PROJECT_SRC}/config_variables.py
    - ./${PROJECT_SRC}/airflow_dags:/${PROJECT_NAME}/${PROJECT_SRC}/airflow_dags
  restart: always
  depends_on:
    - postgres

services:

  airflow-init: 
    <<: *airflow-common
    container_name: airflow-init
    command: >
      bash -c "airflow db init && 
      airflow users create  -u airflow -p airflow -r Admin -f Victor -l Rode√±o -e vrodeno@ucm.es"
    restart: on-failure

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: airflow webserver -p 8080
    ports:
      - '${AIFLOW_PORT}:${AIFLOW_PORT}'
  
  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: airflow scheduler
    

  mlflow:
    container_name: mlflow
    build:
      context: .
      dockerfile: ./docker/mlflow/Dockerfile
      args:
        #POSTGRES_DB: ${POSTGRES_DB}
        POSTGRES_MLFLOW_DB: ${POSTGRES_MLFLOW_DB}
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        ARTIFACT_STORE_PATH: ${ARTIFACT_STORE_PATH}
        MLFLOW_PORT: ${MLFLOW_PORT}
        PROJECT_NAME: ${PROJECT_NAME}
        PROJECT_SRC: ${PROJECT_SRC}
        MLFLOW_HOST: ${MLFLOW_HOST}
    restart: always
    ports:
      - '5000:5000'
    network_mode: host

    volumes:
      - ./${ARTIFACT_STORE_PATH}:/${PROJECT_NAME}/${ARTIFACT_STORE_PATH}
      - ./${DATA_PATH}:/${PROJECT_NAME}/${DATA_PATH}
      - ./${MODELS_PATH}:/${PROJECT_NAME}/${MODELS_PATH}
      - ./${CONTROLLER_PATH}:/${PROJECT_NAME}/${CONTROLLER_PATH}
      - ./${DVC_PATH}:/${PROJECT_NAME}/${DVC_PATH}
      - ./${GIT_PATH}:/${PROJECT_NAME}/${GIT_PATH}
      - ./${LOGS_PATH}:/${PROJECT_NAME}/${LOGS_PATH} # TOdo Add anonym volume 
      - ./${PROJECT_SRC}/:/${PROJECT_NAME}/${PROJECT_SRC}
      
    env_file:
      - .env
    # links:
    #   - postgres
    depends_on:
      - postgres


  postgres:
    container_name: postgres
    build:
      context: .
      dockerfile: ./docker/postgres/Dockerfile
      args:
        POSTGRES_DB: ${POSTGRES_DB}
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    restart: always
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - vol_postres1:/var/lib/postgresql
    env_file:
      - .env

  validate_data:
    container_name: validate_data
    build:
      context: .
      dockerfile: ./docker/use_cases/validate_data/Dockerfile
      args:
        PROJECT_NAME: ${PROJECT_NAME}
        PROJECT_SRC: ${PROJECT_SRC}
        PORT_VALIDATE_DATA: ${PORT_VALIDATE_DATA}
    ports:
      - ${PORT_VALIDATE_DATA}:${PORT_VALIDATE_DATA}
    restart: always
    volumes:
      - ./${DATA_PATH}:/${PROJECT_NAME}/${DATA_PATH}
      - ./${LOGS_PATH}:/${PROJECT_NAME}/${LOGS_PATH}
      - ./${PROJECT_SRC}/validate_data_schema/:/${PROJECT_NAME}/${PROJECT_SRC}/validate_data_schema/
      - ./${PROJECT_SRC}/config_variables.py:/${PROJECT_NAME}/${PROJECT_SRC}/config_variables.py
      - ./${PROJECT_SRC}/logging_config.py:/${PROJECT_NAME}/${PROJECT_SRC}/logging_config.py
      - ./${PROJECT_SRC}/utils/:/${PROJECT_NAME}/${PROJECT_SRC}/utils/
    env_file:
      - .env



volumes:
  vol_postres1:
    driver: local
