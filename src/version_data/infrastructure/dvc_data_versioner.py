import logging
import os
import subprocess
from subprocess import CalledProcessError

from dvc.api import get_url
from dvc.exceptions import OutputNotFoundError
from git import Repo
from git.exc import GitCommandError, InvalidGitRepositoryError

from src.version_data.domain.data_versioner import IDataVersioner

logger = logging.getLogger(__name__)


class DVCDataVersioner(IDataVersioner):
    """
    A class which implements the interface IDataVersioner to version the dataset.
    It versions the dataset using DVC. And it tracks dataset information in an
    experiment run.

    :param git_remote_name: Name of the remote to the git repository
    :type git_remote_name: str
    :param git_branch_name: Name of the branch of the git repository
    :type git_branch_name: str
    """

    def __init__(self, git_remote_name: str, git_branch_name: str):
        self.git_remote_name = git_remote_name
        self.git_branch_name = git_branch_name

    def version_data(self, data_file_path: str, data_version: float) -> dict:
        """
        Version the dataset using DVC, and return info.

        :param data_file_path: Path of the dataset file stored
        :type data_file_path: str
        :param data_version: Version of the data
        :type data_version: float
        :return Information to track
        :type dict
        """

        # Track the dataset in DVC repository
        try:
            relative_data_file_path = os.path.relpath(
                path=data_file_path, start=os.getcwd()
            )
            output = subprocess.run(
                ["dvc", "add", relative_data_file_path], capture_output=True, check=True
            )
            logger.info(
                "Tracked the dataset in the DVC repository using subprocess. "
                f'Stdout: {output.stdout.decode("utf-8") }'
            )
            # Get the metadata file path of the dataset generated by DVC
            relative_metadata_file_path = f"{relative_data_file_path}.dvc"
        except CalledProcessError as err:
            msg = (
                "Error tracking the dataset in the DVC repository using subprocess. "
                f"Command: {err.cmd}. Error: {err.stderr}"
            )
            logger.error(msg)
            raise Exception(msg)

        # Get git repo object
        try:
            repo_path = os.getcwd()
            git_repo = Repo(path=repo_path)
        except InvalidGitRepositoryError as err:
            msg = (
                f"Error getting git repository using GitPython. There is no .git file "
                f"in the path: {repo_path}. Error: {err}"
            )
            logger.info(msg)
            raise InvalidGitRepositoryError(msg)

        # Check if the dataset has changed
        diff_output = git_repo.git.diff(relative_metadata_file_path)
        if diff_output:
            logger.info("The dataset has changed.")
            # Add and commit the DVC metadata of the dataset to the git repository
            commit_message = (
                f"Added max_char_per_line raw data, version: {data_version}"
            )
            try:
                git_repo.git.add(relative_metadata_file_path)
                relative_data_path = os.path.dirname(relative_data_file_path)
                git_repo.git.add(f"{relative_data_path}/.gitignore")
                git_repo.git.commit(m=commit_message)
            except GitCommandError as err:
                msg = (
                    "Error tracking or committing the metadata files of the dataset "
                    f"(.dvc) in the git repo. Command: {err.command}. Error: "
                    f"{err.stderr}"
                )
                logger.error(msg)
                raise Exception(msg)

            # Push the DVC metadata of the dataset to the git repository
            try:
                origin = git_repo.remote(name=self.git_remote_name)
                output = origin.push(refspec=self.git_branch_name)
                commit_hash = output[0].summary
                logger.info(
                    f"Pushed metadata files (.dvc) of the dataset in the branch "
                    f"{self.git_branch_name}. Commit hash: {commit_hash}"
                )

            except ValueError as err:
                message = (
                    f"Error getting remote named {self.git_remote_name} of the git"
                    f" repo. Error: {err}"
                )
                logger.error(message)
                raise ValueError(message)
            except GitCommandError as err:
                msg = (
                    "Error pushing commited metadata files (.dvc) of the dataset in "
                    f"the branch named {self.git_branch_name}. Command: {err.command}."
                    f"Error: {err.stderr}"
                )
                logger.error(msg)
                raise Exception(msg)

            # Push the dataset versioned in dvc storage (GCS)
            try:
                # If GCS is the remote storage, env GOOGLE_APPLICATION_CREDENTIALS needed
                output = subprocess.run(
                    ["dvc", "push"], capture_output=True, check=True
                )
                logger.info(
                    "Dataset versioned pushed in the DVC storage using subprocess"
                    f'. Stdout: {output.stdout.decode("utf-8")}'
                )
            except CalledProcessError as err:
                msg = (
                    "Error pushing the dataset versioned in the DVC storage. "
                    f"Command: {err.cmd}. Error: {err.stderr}. Env variable GCP "
                    f'credentials :{os.getenv("GOOGLE_APPLICATION_CREDENTIALS")}'
                )
                logger.error(msg)
                raise Exception(msg)
        else:
            logger.warning("The dataset has not changed.")

        # Get information to track
        relative_data_file_path = os.path.relpath(
            path=data_file_path, start=os.getcwd()
        )
        try:
            dvc_data_path = get_url(path=relative_data_file_path, repo=os.getcwd())
            logger.info("Dataset path in DVC storage gotten succesfully")
        except OutputNotFoundError as err:
            message = f"Error getting dataset path in DVC storage. Error: {err}"
            logger.error(message)
            raise Exception(message)

        information_to_track = {
            "dvc data path": dvc_data_path,
            "data version": str(data_version),
            "data file path": data_file_path,
        }
        return information_to_track
